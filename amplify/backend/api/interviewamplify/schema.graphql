type Interview @model @auth(rules: [{ allow: owner}]) @aws_cognito_user_pools{
	id: ID!
	title: String!
	profileInterviewsId: ID!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type Message @model (subscriptions: { level: public }) @auth(rules: [{ allow: owner}]) @aws_cognito_user_pools{
	id: ID!
	sender: String!
	messageInterviewId: ID!
	message: String!
	direction: String
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type Profile @model @auth(rules: [{ allow: owner}]) @aws_cognito_user_pools{
	id: ID!
	name: String!
	createdAt: AWSDateTime!
	updatedAt: AWSDateTime!
}

type Query {
	getInterview(id: ID!): Interview
	listInterviews(filter: ModelInterviewFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelInterviewConnection
	getMessage(id: ID!): Message
	listMessages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
	getProfile(id: ID!): Profile
	listProfiles(filter: ModelProfileFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelProfileConnection
}